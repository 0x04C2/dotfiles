"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" basic setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" wonderful life
set nocompatible

" allow backspacing in insert mode
set backspace=indent,eol,start

" enable syntax processing
syntax enable

" set UTF-8 encoding
scriptencoding utf-8
set encoding=utf-8
set fileformat=unix
set fileencoding=utf-8

" show the line and column number of the cursor position
set ruler

" show the line number
set number

" always show the statusline
set laststatus=2

" show (partial) command in the last line of the screen
set showcmd

" enhance command-line completion operate
set wildmenu

" list all matches and complete till longest common string
" and use <Tab> to complete the option
set wildmode=list:longest,full

" keep minimal five lines visible below the cursor
set scrolloff=5

" show invisible characters
set list listchars=tab:»▸,trail:·,nbsp:·",eol:¬

" never create .swapfile
set noswapfile

" highlight the search result
set hlsearch

" hightlight the pattern when typing
set incsearch

" default indent settings
set autoindent expandtab tabstop=2 shiftwidth=2 softtabstop=2

" enable modeline
set modeline

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" key mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" change mapleader key to ,
let mapleader=','

" hard mode
noremap  <Left>  <NOP>
inoremap <Left>  <NOP>
noremap  <Right> <NOP>
inoremap <Right> <NOP>
noremap  <Up>    <NOP>
inoremap <Up>    <NOP>
noremap  <Down>  <NOP>
inoremap <Down>  <NOP>

" jj to exit insert mode
inoremap jj <ESC>

" ,d to stop the highlighting for the 'hlsearch' option
nnoremap <Leader>d :nohlsearch<CR>

" ,, to switch to last edit buffer
nnoremap <Leader><Leader> <C-^>

" simplify windows navigation
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>

" simplify split window
nnoremap <C-_> :split<CR>
nnoremap <C-\> <C-W><C-V>

" ,r to reload .vimrc
nnoremap <Leader>r :source $MYVIMRC<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" difference settings for difference filetypes
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" the autocmd feature is optional if you want to compile your own vim.
" anyway, this condition does not hurt.
if has("autocmd")

  " allow different settings for different filetypes
  filetype plugin indent on

  " setting for c type files
  autocmd Filetype c setlocal
    \ noexpandtab
    \ cindent
    \ nolist
    \ tabstop=4 shiftwidth=4 softtabstop=4

  " in makefile, don't expand tabs to spaces, since actual tab char are needed
  autocmd BufRead,BufNewFile *Makefile* setlocal filetype=make
  autocmd Filetype make setlocal
    \ noexpandtab
    \ nolist
    \ tabstop=4 shiftwidth=4 softtabstop=4

  " setting for shell script
  autocmd Filetype sh setlocal
    \ tabstop=2 shiftwidth=2 softtabstop=2
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" plugin management by junegunn/vim-plug
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

" unite and create user interface
Plug 'Shougo/unite.vim'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}

" show differences with style
Plug 'mhinz/vim-signify'

" syntax checking
Plug 'scrooloose/syntastic'

" color palette
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'altercation/vim-colors-solarized'

" explore filesystem and open file/dir
Plug 'scrooloose/nerdtree'

" align text
Plug 'junegunn/vim-easy-align'

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" color palette
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" vim-airline/vim-airline-themes
let g:airline_theme='base16'

" altercation/vim-color-solarized
" dark background
set background=dark

" enable solarized scheme
" use silent to ignore error when install plugins by command line
silent! colorscheme solarized

" use transparent background of the terminal emulator
let g:solarized_termtrans=1

" use 256 color for solarized palette
let g:solarized_termcolors = 256

" highlight current line
set cursorline

" highlight current line with DarkBlue
highlight CursorLine cterm=None ctermbg=DarkBlue ctermfg=White

" enable 256 color
set t_Co=256

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" scrooloose/syntastic
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" enrich statusline to show warningmsg
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" show error signify on the line, where the errors are detected
let g:syntastic_always_populate_loc_list = 1

" the error window will be automatically opened when errors are detected, and
" closed when none are detected
let g:syntastic_auto_loc_list = 1

" run syntax checks when buffers are first loaded, as well as on saving
let g:syntastic_check_on_open = 1

" skip cehcks when type :wq, :x and :ZZ
let g:syntastic_check_on_wq = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" scrooloose/nerdtree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ,t to open NERDTree
nnoremap <Leader>t :NERDTreeToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" junegunn/vim-easy-align
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ,a to start interactive EasyAlign in visual mode
xmap <Leader>a <Plug>(EasyAlign)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Shougo/unite.vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ,e to select one opened buffer
nnoremap <leader>e :<C-u>Unite  buffer<CR>

" ,s to start global search
nnoremap <Leader>s :<C-u>Unite -auto-preview grep:.<CR>

" default use grep to search if there is no ag command
if executable('ag')
  " set ag to search
  let g:unite_source_grep_command = 'ag'

  " setup ag search options
  let g:unite_source_grep_default_opts = '--nocolor --nogroup'

  " set grep recursive option to empty
  let g:unite_source_grep_recursive_opt = ''
endif
